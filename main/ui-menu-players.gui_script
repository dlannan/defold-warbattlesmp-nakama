local gooey = require "gooey.gooey"
local utils = require "gooey.themes.utils"

local COLOR_LIGHTGREY = vmath.vector4(0.8, 0.8, 0.8, 1)
local COLOR_WHITE = vmath.vector4(1)
local COLOR_BLACK = vmath.vector4(0,0,0,1)
local COLOR_RED = vmath.vector4(1,0,0,1)


local function update_button(button)
	if button.over_now then
		gui.set_color(button.node, COLOR_LIGHTGREY)
	elseif button.out_now then
		gui.set_color(button.node, COLOR_WHITE)
	elseif button.pressed_now then
		utils.shake(button.node, vmath.vector3(1))
	end
end

local function update_input(input)
	if input.pressed_now then
		gui.set_color(input.node, COLOR_RED)
	elseif input.released_now then
		gui.set_color(input.node, COLOR_BLACK)
	end
end


local function update_list(list)
	for i,item in ipairs(list.items) do
		if(item.data) then 
			gui.set_text(item.nodes[hash("listitem_text")], item.data)
		end 
	end
end

function init(self)
	gooey.acquire_input()

	self.gamename 	= ""
	self.myname 	= ""

	--gooey.input("input_myname", gui.KEYBOARD_TYPE_DEFAULT, nil, nil, { empty_text = self.myname })
		
	self.list_data = { }
	update_list(gooey.dynamic_list("dynamiclist", "dynamiclist_bounds", "listitem", self.list_data))
end

function on_input(self, action_id, action)

	local group = gooey.group("group2", function()

		gooey.button("start", action_id, action, function(button)
			if not button.long_pressed then
				msg.post("gui-runtime", "togglegui")
				msg.post("gui-runtime", "begingame")
			end
		end, update_button)

		gooey.button("button_back", action_id, action, function(button)
			if not button.long_pressed then
				msg.post("gui-runtime", "mainmenu")
			end
		end, update_button)

		gooey.button("button_setname", action_id, action, function(button)
			if not button.long_pressed then
				local name = gui.get_text(gui.get_node("input_myname"))
				msg.post("gui-runtime", "setname", { name = name })
			end
		end, update_button)
		
		gooey.input("input_myname", gui.KEYBOARD_TYPE_DEFAULT, 
			action_id, action, { 
				empty_text = self.myname, 
				allowed_characters = "[%a%d%s]", 
				use_marked_text = false
			}, update_input )
		
		gooey.dynamic_list("dynamiclist", "dynamiclist_bounds", "listitem",
			self.list_data, action_id, action, nil, 
			function(list)
				print("selected item", list.selected_item, list.data[list.selected_item])
			end, update_list)
	end)
	return group.consumed
end

function on_message(self, message_id, message, sender)

	if(message_id == hash("gamestart")) then 
		if(message.people) then 
			self.list_data = {}
			for k,v in ipairs(message.people) do 
				self.list_data[k] = v.username
			end 
			gooey.dynamic_list("dynamiclist", "dynamiclist_bounds", "listitem", 
				self.list_data, nil, nil, nil, nil, update_list)
		end
		if(message.myname) then 
			self.myname = message.myname
			gooey.input("input_myname", gui.KEYBOARD_TYPE_DEFAULT, nil, nil, { empty_text = self.myname })
		end
	end
	if(message_id == hash("gameplayers")) then 
		if(message.people) then 
			self.list_data = {}
			for k,v in ipairs(message.people) do 
				self.list_data[k] = v.username
			end 
			gooey.dynamic_list("dynamiclist", "dynamiclist_bounds", "listitem", 
			self.list_data, nil, nil, nil, nil, update_list)
		end
	end
	if(message_id == hash("gamename")) then 
		if(message.gamename) then
			self.gamename = message.gamename
			gui.set_text(gui.get_node("gamename_text"), self.gamename)
		end
	end 
end 
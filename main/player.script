
-- -----------------------------------------------------------------------------
-- For simple directional ops easier/better to have a lookup than use pyth func
local fire_lookup = {}
fire_lookup[0] 		= 1.5708

fire_lookup[10] 	= 6.28319
fire_lookup[1] 		= 1.5708
fire_lookup[-10] 	= 3.14159
fire_lookup[-1] 	= 4.71239

fire_lookup[9] 		= 5.49779
fire_lookup[11] 	= 0.785398
fire_lookup[-9] 	= 2.35619
fire_lookup[-11]	= 3.92699

-- -----------------------------------------------------------------------------

go.property("pcolor", vmath.vector4(1,1,1,1))

local DIST_CHANGED 		= 1
-- This can be tweaked as needed. Probably should match network/cpu perf
local MOVE_SMOOTH		= 6  

-- Types of prediction available.
-- TODO: Fix this, prediction broken - http was not a good test case
local PREDICTION = {
	NONE 	= "none",
	CLIENT	= "client", 
	SERVER	= "server",
}

-- -----------------------------------------------------------------------------

function init(self)
	msg.post(".", "acquire_input_focus")

	self.moving = false
	self.firing = false                     -- [1]

	self.input 	= vmath.vector3(0, 0, 0)
	self.dir 	= vmath.vector3(0, 1, 0)
	self.speed 	= 100
	self.strdir = 0
	self.lastdt = 0
	self.frame 	= 0

	self.posL 		= vmath.vector3()
	-- Used to collect update states for the object
	self.updater 	= {}
	self.pos_target = go.get_position()

	self.prediction = PREDICTION.NONE
	self.prev_input = { x = 0, y = 0 }
	self.move_t = socket.gettime()
	sprite.play_flipbook("#sprite", hash("player-idle"))
end

-- -----------------------------------------------------------------------------

function final(self)                                -- [7]
	msg.post(".", "release_input_focus")            -- [8]
end

-- -----------------------------------------------------------------------------
--  Update other players - prediction or latent
local function other_update(self, dt)

	local pos = go.get_position()
	local smoothstep = MOVE_SMOOTH * dt
	local tpos = pos
	
	local thismove = table.remove(self.updater, 1)
	if(thismove) then 
		local m = thismove.m
		if(m.f) then 
			self.firing = m.f
			self.strdir = m.sd
			self.dir = vmath.vector3(m.rx, m.ry, 0)
		end
		if(m.x and m.y) then 
			self.pos_target = vmath.vector3(m.x, m.y, 1)
			tpos = thismove.pos
		
			self.moving = m.m

			self.strdir = m.sd
			self.dir = vmath.vector3(m.dx, m.dy, 0)
			self.move_t = m.t
			self.speed = m.s
		end
	end
	
	-- prediction take in the frame id and estimates new targetpos
	if(self.prediction == PREDICTION.CLIENT) then 

		if(self.strdir == 0) then self.speed = 0 end
		local timeout = socket.gettime() - self.move_t
		self.move_t = socket.gettime()
		dir = (self.pos_target - pos)
		-- if(vmath.length(self.dir) > 0) then self.dir = vmath.normalize(self.dir) end
		-- this predicts to current frame. We predict a little past that.
		local newtarget = tpos + dir * self.speed * dt
		smoothstep = 0.1 -- much less smoothing.
		go.set_position( vmath.lerp(smoothstep, pos, newtarget) )
	else
		go.set_position( vmath.lerp(smoothstep, pos, self.pos_target) )
	end
end


-- -----------------------------------------------------------------------------
-- Check the input during update. 
local function check_input(self, dt)
	if vmath.length(self.input) > 0 then
		self.moving = true                          -- [16]
		self.dir = vmath.normalize(self.input)      -- [17]
	end

	if(self.other == nil) then 
		local pos = go.get_position()
		local inpchanged = (self.prev_input.x ~= self.input.x or self.prev_input.y ~= self.input.y)
		
		if((inpchanged == false and vmath.length(pos-self.posL) > DIST_CHANGED) or inpchanged ) then 
			msg.post("gui-runtime", "player_move", { state = {
					x = math.floor(pos.x),
					y = math.floor(pos.y), 
					m = self.moving,
					sd = self.strdir,
					dx = self.dir.x, 
					dy = self.dir.y,
					s = self.speed,
				}
			})
				self.posL = pos
			end 
			if(self.firing) then

				msg.post("gui-runtime", "player_shoot", { state = {
					f = self.firing,
					sd = self.strdir,
					rx = self.dir.x, 
					ry = self.dir.y,
				}
			})
		end
	end
end

-- -----------------------------------------------------------------------------

local function do_update(self, dt)

	self.lastdt = dt
		
	if(self.other) then 		
		other_update(self, dt)
	else
		-- stopped moving.
		if(self.moving == false and 
			(self.input.x ~= self.prev_input.x or self.input.y ~= self.prev_input.y)) then 
			local pos = go.get_position()			
			msg.post("gui-runtime", "player_move", { state = {
					x = math.floor(pos.x),
					y = math.floor(pos.y), 
					m = false,
					dx = self.dir.x, 
					dy = self.dir.y,
					sd = 0,
					s = self.speed,
					t = socket.gettime(),
				}
			})
		end

		if self.moving then
			self.strdir = self.input.x * 10 +  self.input.y
			local pos = go.get_position()
			pos = pos + self.dir * self.speed * dt
			go.set_position(pos)
		end
	end 

		
	if self.firing then
		local angle = fire_lookup[self.strdir]
		local rot = vmath.quat_rotation_z(angle)            -- [2]
		local props = { dir = self.dir }                    -- [3]
		factory.create("#rocketfactory", nil, rot, props)   -- [4]
	end

	if(self.moving and not self.prev_moving) then 
		sprite.play_flipbook("#sprite", hash("player-down"))
	end 
	if(not self.moving and self.prev_moving) then 
		sprite.play_flipbook("#sprite", hash("player-idle"))
	end 

	self.prev_moving = self.moving
	self.prev_input = { x = self.input.x, y = self.input.y }
	-- self.input.x = 0
	-- self.input.y = 0
	self.moving = false
	self.firing = false                     -- [2]		
end 


-- -----------------------------------------------------------------------------

function update(self, dt)

	check_input(self, dt)
	do_update(self, dt)
	self.frame 	= self.frame + 1
end

-- -----------------------------------------------------------------------------

local function do_input(self, action_id, action)

	if(self.other == nil) then 
		
		if(action_id == hash("predict") and action.released) then 
			-- if(self.prediction == PREDICTION.NONE) then 
			-- 	self.prediction = PREDICTION.CLIENT
			-- else 
			-- 	self.prediction = PREDICTION.NONE 
			-- end
			msg.post("/gui#ui", "predict", { prediction = self.prediction })
		end 
		
		if action_id == hash("fire") and action.released then
			self.firing = true
		end

		local ap = action.pressed 
		local ar = action.released
		if action_id == hash("up") and ap then
			self.input.y = 1                            -- [15]
		elseif action_id == hash("down") and ap then
			self.input.y = -1
		end
		if(action_id == hash("up") or action_id == hash("down")) and ar then 
			self.input.y = 0
		end
		if action_id == hash("left") and ap then
			self.input.x = -1
		elseif action_id == hash("right") and ap then
			self.input.x = 1
		end
		if(action_id == hash("left") or action_id == hash("right")) and ar then 
			self.input.x = 0
		end 
	end 

end 

function on_input(self, action_id, action)          -- [14]

	do_input(self, action_id, action)
end

-- -----------------------------------------------------------------------------

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("building") then
			--print("collided", message, message_id)
			local pos = go.get_position()
			--pprint(self.dir, self.speed)
			pos = pos - (self.dir * self.speed * self.lastdt)
			go.set_position(pos)
		end
	end
	
	if message_id == hash("player_details") then 

		label.set_text("#playername", message.name)
		go.set("#playername", "color", message.color)
		-- go.set("#sprite", "tint", message.color)

		-- Start update timers for players
		if(message.other) then 
			self.other = true
		end
	end 
	
	if(self.other) then 
		if message_id == hash("player_move") then 
			if(message.x and message.y) then
				self.pos = vmath.vector3(message.x, message.y, 1)
			else 
				self.pos = nil 
			end
			table.insert(self.updater, { pos = self.pos, m = message })
		end 

		if message_id == hash("player_shoot") then 
			table.insert(self.updater, { pos = nil, m = message })
		end 
	end
end
-- -----------------------------------------------------------------------------
